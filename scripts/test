#!/usr/bin/env bash

check-cmd() {
    CMD=$1
    which $CMD > /dev/null
    if [[ $? == 1 ]]; then
        help-cmd $@
    fi
    test -x $(which $CMD)
    if [[ $? == 1 ]]; then
        help-cmd $@
    fi
}

help-cmd() {
    echo "$1 not found"
    shift
    echo "Execute the following to install: $*"
    exit 1
}

check-cmd goimports "go get golang.org/x/tools/cmd/goimports"
check-cmd ginkgo    "go get github.com/onsi/ginkgo/ginkgo"

set -e

cd $(dirname $0)/..

stop-integration-services() {
    docker-compose --file scripts/postgres-docker-compose.yml down
}

DOCKER_STARTED=0
error-trap() {
    echo -e "\033[1m\033[41m Failed!                                                                        \033[0m"
    if [[ $DOCKER_STARTED == 1 ]] ; then
        stop-integration-services
    fi
}

trap 'error-trap' ERR

find . -name \*.coverprofile -exec rm {} \;

goimports -w $(ls | grep -Ev "LICENSE|README.md|vendor")

INTEGRATION_REGEXP=".* Integration"
GINKGO_OPTS="-r
    --keepGoing
    --randomizeAllSpecs
    --randomizeSuites
    --failOnPending
    --cover
    --trace
    --race
    --progress
    $@"

echo -e "\033[1m\033[42m Unit tests...                                                                  \033[0m"
ginkgo -r --skip="$INTEGRATION_REGEXP" $GINKGO_OPTS

for FILE in $(find . -name \*.coverprofile) ; do
    mv -f $FILE $(dirname $FILE)/$(basename $FILE .coverprofile)_unit.coverprofile
done

echo -e "\033[1m\033[42m Integration tests...                                                           \033[0m"

docker-compose --file ./scripts/postgres-docker-compose.yml up -d --force-recreate
DOCKER_STARTED=1

export DB_SERVER=localhost
export DB_PORT=5678
export DB_USERNAME=garbanzo
export DB_PASSWORD=garbanzo-secret

go run persistence/migrate/main.go

ginkgo -r --focus="$INTEGRATION_REGEXP" $GINKGO_OPTS

stop-integration-services

echo -e "\033[1m\033[42m Completed successfully.                                                        \033[0m"

rm -f _total.coverprofile 2> /dev/null
for FILE in $(find . -name \*.coverprofile) ; do
    tail -n +2 $FILE >> _total.coverprofile
done

echo 'mode: atomic' > total.coverprofile
awk 'BEGIN { FS = " " }
NF == 3 {
        k = $1 " " $2;
        if (k in block) block[k] += $3
        else block[k] = $3
}
END {
        for (k in block) {
                print k, block[k]
        }
}' < _total.coverprofile >> total.coverprofile

echo "Total coverage: $(go tool cover -func=total.coverprofile | tail -1 | awk '{ print $3 }')"
