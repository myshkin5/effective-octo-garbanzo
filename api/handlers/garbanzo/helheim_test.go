// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package garbanzo_test

import (
	"context"
	"time"

	"github.com/myshkin5/effective-octo-garbanzo/persistence/data"
	"github.com/satori/go.uuid"
)

type mockGarbanzoService struct {
	FetchByOctoNameCalled chan bool
	FetchByOctoNameInput  struct {
		Ctx      chan context.Context
		OctoName chan string
	}
	FetchByOctoNameOutput struct {
		Garbanzos chan []data.Garbanzo
		Err       chan error
	}
	FetchByAPIUUIDAndOctoNameCalled chan bool
	FetchByAPIUUIDAndOctoNameInput  struct {
		Ctx      chan context.Context
		ApiUUID  chan uuid.UUID
		OctoName chan string
	}
	FetchByAPIUUIDAndOctoNameOutput struct {
		Garbanzo chan data.Garbanzo
		Err      chan error
	}
	CreateCalled chan bool
	CreateInput  struct {
		Ctx        chan context.Context
		OctoName   chan string
		GarbanzoIn chan data.Garbanzo
	}
	CreateOutput struct {
		GarbanzoOut chan data.Garbanzo
		Err         chan error
	}
	DeleteByAPIUUIDAndOctoNameCalled chan bool
	DeleteByAPIUUIDAndOctoNameInput  struct {
		Ctx      chan context.Context
		ApiUUID  chan uuid.UUID
		OctoName chan string
	}
	DeleteByAPIUUIDAndOctoNameOutput struct {
		Err chan error
	}
}

func newMockGarbanzoService() *mockGarbanzoService {
	m := &mockGarbanzoService{}
	m.FetchByOctoNameCalled = make(chan bool, 100)
	m.FetchByOctoNameInput.Ctx = make(chan context.Context, 100)
	m.FetchByOctoNameInput.OctoName = make(chan string, 100)
	m.FetchByOctoNameOutput.Garbanzos = make(chan []data.Garbanzo, 100)
	m.FetchByOctoNameOutput.Err = make(chan error, 100)
	m.FetchByAPIUUIDAndOctoNameCalled = make(chan bool, 100)
	m.FetchByAPIUUIDAndOctoNameInput.Ctx = make(chan context.Context, 100)
	m.FetchByAPIUUIDAndOctoNameInput.ApiUUID = make(chan uuid.UUID, 100)
	m.FetchByAPIUUIDAndOctoNameInput.OctoName = make(chan string, 100)
	m.FetchByAPIUUIDAndOctoNameOutput.Garbanzo = make(chan data.Garbanzo, 100)
	m.FetchByAPIUUIDAndOctoNameOutput.Err = make(chan error, 100)
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Ctx = make(chan context.Context, 100)
	m.CreateInput.OctoName = make(chan string, 100)
	m.CreateInput.GarbanzoIn = make(chan data.Garbanzo, 100)
	m.CreateOutput.GarbanzoOut = make(chan data.Garbanzo, 100)
	m.CreateOutput.Err = make(chan error, 100)
	m.DeleteByAPIUUIDAndOctoNameCalled = make(chan bool, 100)
	m.DeleteByAPIUUIDAndOctoNameInput.Ctx = make(chan context.Context, 100)
	m.DeleteByAPIUUIDAndOctoNameInput.ApiUUID = make(chan uuid.UUID, 100)
	m.DeleteByAPIUUIDAndOctoNameInput.OctoName = make(chan string, 100)
	m.DeleteByAPIUUIDAndOctoNameOutput.Err = make(chan error, 100)
	return m
}
func (m *mockGarbanzoService) FetchByOctoName(ctx context.Context, octoName string) (garbanzos []data.Garbanzo, err error) {
	m.FetchByOctoNameCalled <- true
	m.FetchByOctoNameInput.Ctx <- ctx
	m.FetchByOctoNameInput.OctoName <- octoName
	return <-m.FetchByOctoNameOutput.Garbanzos, <-m.FetchByOctoNameOutput.Err
}
func (m *mockGarbanzoService) FetchByAPIUUIDAndOctoName(ctx context.Context, apiUUID uuid.UUID, octoName string) (garbanzo data.Garbanzo, err error) {
	m.FetchByAPIUUIDAndOctoNameCalled <- true
	m.FetchByAPIUUIDAndOctoNameInput.Ctx <- ctx
	m.FetchByAPIUUIDAndOctoNameInput.ApiUUID <- apiUUID
	m.FetchByAPIUUIDAndOctoNameInput.OctoName <- octoName
	return <-m.FetchByAPIUUIDAndOctoNameOutput.Garbanzo, <-m.FetchByAPIUUIDAndOctoNameOutput.Err
}
func (m *mockGarbanzoService) Create(ctx context.Context, octoName string, garbanzoIn data.Garbanzo) (garbanzoOut data.Garbanzo, err error) {
	m.CreateCalled <- true
	m.CreateInput.Ctx <- ctx
	m.CreateInput.OctoName <- octoName
	m.CreateInput.GarbanzoIn <- garbanzoIn
	return <-m.CreateOutput.GarbanzoOut, <-m.CreateOutput.Err
}
func (m *mockGarbanzoService) DeleteByAPIUUIDAndOctoName(ctx context.Context, apiUUID uuid.UUID, octoName string) (err error) {
	m.DeleteByAPIUUIDAndOctoNameCalled <- true
	m.DeleteByAPIUUIDAndOctoNameInput.Ctx <- ctx
	m.DeleteByAPIUUIDAndOctoNameInput.ApiUUID <- apiUUID
	m.DeleteByAPIUUIDAndOctoNameInput.OctoName <- octoName
	return <-m.DeleteByAPIUUIDAndOctoNameOutput.Err
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
