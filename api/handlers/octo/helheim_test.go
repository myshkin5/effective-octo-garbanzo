// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package octo_test

import (
	"context"
	"time"

	"github.com/myshkin5/effective-octo-garbanzo/persistence/data"
)

type mockOctoService struct {
	FetchAllCalled chan bool
	FetchAllInput  struct {
		Ctx chan context.Context
	}
	FetchAllOutput struct {
		Octos chan []data.Octo
		Err   chan error
	}
	FetchByNameCalled chan bool
	FetchByNameInput  struct {
		Ctx  chan context.Context
		Name chan string
	}
	FetchByNameOutput struct {
		Octo chan data.Octo
		Err  chan error
	}
	CreateCalled chan bool
	CreateInput  struct {
		Ctx    chan context.Context
		OctoIn chan data.Octo
	}
	CreateOutput struct {
		OctoOut chan data.Octo
		Err     chan error
	}
	DeleteByNameCalled chan bool
	DeleteByNameInput  struct {
		Ctx  chan context.Context
		Name chan string
	}
	DeleteByNameOutput struct {
		Err chan error
	}
}

func newMockOctoService() *mockOctoService {
	m := &mockOctoService{}
	m.FetchAllCalled = make(chan bool, 100)
	m.FetchAllInput.Ctx = make(chan context.Context, 100)
	m.FetchAllOutput.Octos = make(chan []data.Octo, 100)
	m.FetchAllOutput.Err = make(chan error, 100)
	m.FetchByNameCalled = make(chan bool, 100)
	m.FetchByNameInput.Ctx = make(chan context.Context, 100)
	m.FetchByNameInput.Name = make(chan string, 100)
	m.FetchByNameOutput.Octo = make(chan data.Octo, 100)
	m.FetchByNameOutput.Err = make(chan error, 100)
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Ctx = make(chan context.Context, 100)
	m.CreateInput.OctoIn = make(chan data.Octo, 100)
	m.CreateOutput.OctoOut = make(chan data.Octo, 100)
	m.CreateOutput.Err = make(chan error, 100)
	m.DeleteByNameCalled = make(chan bool, 100)
	m.DeleteByNameInput.Ctx = make(chan context.Context, 100)
	m.DeleteByNameInput.Name = make(chan string, 100)
	m.DeleteByNameOutput.Err = make(chan error, 100)
	return m
}
func (m *mockOctoService) FetchAll(ctx context.Context) (octos []data.Octo, err error) {
	m.FetchAllCalled <- true
	m.FetchAllInput.Ctx <- ctx
	return <-m.FetchAllOutput.Octos, <-m.FetchAllOutput.Err
}
func (m *mockOctoService) FetchByName(ctx context.Context, name string) (octo data.Octo, err error) {
	m.FetchByNameCalled <- true
	m.FetchByNameInput.Ctx <- ctx
	m.FetchByNameInput.Name <- name
	return <-m.FetchByNameOutput.Octo, <-m.FetchByNameOutput.Err
}
func (m *mockOctoService) Create(ctx context.Context, octoIn data.Octo) (octoOut data.Octo, err error) {
	m.CreateCalled <- true
	m.CreateInput.Ctx <- ctx
	m.CreateInput.OctoIn <- octoIn
	return <-m.CreateOutput.OctoOut, <-m.CreateOutput.Err
}
func (m *mockOctoService) DeleteByName(ctx context.Context, name string) (err error) {
	m.DeleteByNameCalled <- true
	m.DeleteByNameInput.Ctx <- ctx
	m.DeleteByNameInput.Name <- name
	return <-m.DeleteByNameOutput.Err
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
