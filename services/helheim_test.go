// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package services_test

import (
	"context"
	"database/sql"
	"time"

	"github.com/myshkin5/effective-octo-garbanzo/persistence"
	"github.com/myshkin5/effective-octo-garbanzo/persistence/data"
	"github.com/satori/go.uuid"
)

type mockGarbanzoStore struct {
	FetchAllGarbanzosCalled chan bool
	FetchAllGarbanzosInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
	}
	FetchAllGarbanzosOutput struct {
		Garbanzos chan []data.Garbanzo
		Err       chan error
	}
	FetchGarbanzoByAPIUUIDCalled chan bool
	FetchGarbanzoByAPIUUIDInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		ApiUUID  chan uuid.UUID
	}
	FetchGarbanzoByAPIUUIDOutput struct {
		Garbanzo chan data.Garbanzo
		Err      chan error
	}
	CreateGarbanzoCalled chan bool
	CreateGarbanzoInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		Garbanzo chan data.Garbanzo
	}
	CreateGarbanzoOutput struct {
		GarbanzoId chan int
		Err        chan error
	}
	DeleteGarbanzoByAPIUUIDCalled chan bool
	DeleteGarbanzoByAPIUUIDInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		ApiUUID  chan uuid.UUID
	}
	DeleteGarbanzoByAPIUUIDOutput struct {
		Err chan error
	}
}

func newMockGarbanzoStore() *mockGarbanzoStore {
	m := &mockGarbanzoStore{}
	m.FetchAllGarbanzosCalled = make(chan bool, 100)
	m.FetchAllGarbanzosInput.Ctx = make(chan context.Context, 100)
	m.FetchAllGarbanzosInput.Database = make(chan persistence.Database, 100)
	m.FetchAllGarbanzosOutput.Garbanzos = make(chan []data.Garbanzo, 100)
	m.FetchAllGarbanzosOutput.Err = make(chan error, 100)
	m.FetchGarbanzoByAPIUUIDCalled = make(chan bool, 100)
	m.FetchGarbanzoByAPIUUIDInput.Ctx = make(chan context.Context, 100)
	m.FetchGarbanzoByAPIUUIDInput.Database = make(chan persistence.Database, 100)
	m.FetchGarbanzoByAPIUUIDInput.ApiUUID = make(chan uuid.UUID, 100)
	m.FetchGarbanzoByAPIUUIDOutput.Garbanzo = make(chan data.Garbanzo, 100)
	m.FetchGarbanzoByAPIUUIDOutput.Err = make(chan error, 100)
	m.CreateGarbanzoCalled = make(chan bool, 100)
	m.CreateGarbanzoInput.Ctx = make(chan context.Context, 100)
	m.CreateGarbanzoInput.Database = make(chan persistence.Database, 100)
	m.CreateGarbanzoInput.Garbanzo = make(chan data.Garbanzo, 100)
	m.CreateGarbanzoOutput.GarbanzoId = make(chan int, 100)
	m.CreateGarbanzoOutput.Err = make(chan error, 100)
	m.DeleteGarbanzoByAPIUUIDCalled = make(chan bool, 100)
	m.DeleteGarbanzoByAPIUUIDInput.Ctx = make(chan context.Context, 100)
	m.DeleteGarbanzoByAPIUUIDInput.Database = make(chan persistence.Database, 100)
	m.DeleteGarbanzoByAPIUUIDInput.ApiUUID = make(chan uuid.UUID, 100)
	m.DeleteGarbanzoByAPIUUIDOutput.Err = make(chan error, 100)
	return m
}
func (m *mockGarbanzoStore) FetchAllGarbanzos(ctx context.Context, database persistence.Database) (garbanzos []data.Garbanzo, err error) {
	m.FetchAllGarbanzosCalled <- true
	m.FetchAllGarbanzosInput.Ctx <- ctx
	m.FetchAllGarbanzosInput.Database <- database
	return <-m.FetchAllGarbanzosOutput.Garbanzos, <-m.FetchAllGarbanzosOutput.Err
}
func (m *mockGarbanzoStore) FetchGarbanzoByAPIUUID(ctx context.Context, database persistence.Database, apiUUID uuid.UUID) (garbanzo data.Garbanzo, err error) {
	m.FetchGarbanzoByAPIUUIDCalled <- true
	m.FetchGarbanzoByAPIUUIDInput.Ctx <- ctx
	m.FetchGarbanzoByAPIUUIDInput.Database <- database
	m.FetchGarbanzoByAPIUUIDInput.ApiUUID <- apiUUID
	return <-m.FetchGarbanzoByAPIUUIDOutput.Garbanzo, <-m.FetchGarbanzoByAPIUUIDOutput.Err
}
func (m *mockGarbanzoStore) CreateGarbanzo(ctx context.Context, database persistence.Database, garbanzo data.Garbanzo) (garbanzoId int, err error) {
	m.CreateGarbanzoCalled <- true
	m.CreateGarbanzoInput.Ctx <- ctx
	m.CreateGarbanzoInput.Database <- database
	m.CreateGarbanzoInput.Garbanzo <- garbanzo
	return <-m.CreateGarbanzoOutput.GarbanzoId, <-m.CreateGarbanzoOutput.Err
}
func (m *mockGarbanzoStore) DeleteGarbanzoByAPIUUID(ctx context.Context, database persistence.Database, apiUUID uuid.UUID) (err error) {
	m.DeleteGarbanzoByAPIUUIDCalled <- true
	m.DeleteGarbanzoByAPIUUIDInput.Ctx <- ctx
	m.DeleteGarbanzoByAPIUUIDInput.Database <- database
	m.DeleteGarbanzoByAPIUUIDInput.ApiUUID <- apiUUID
	return <-m.DeleteGarbanzoByAPIUUIDOutput.Err
}

type mockOctoStore struct {
	FetchAllOctosCalled chan bool
	FetchAllOctosInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
	}
	FetchAllOctosOutput struct {
		Octos chan []data.Octo
		Err   chan error
	}
	FetchOctoByNameCalled chan bool
	FetchOctoByNameInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		Name     chan string
	}
	FetchOctoByNameOutput struct {
		Octo chan data.Octo
		Err  chan error
	}
	CreateOctoCalled chan bool
	CreateOctoInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		Octo     chan data.Octo
	}
	CreateOctoOutput struct {
		OctoId chan int
		Err    chan error
	}
	DeleteOctoByNameCalled chan bool
	DeleteOctoByNameInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		Name     chan string
	}
	DeleteOctoByNameOutput struct {
		Err chan error
	}
}

func newMockOctoStore() *mockOctoStore {
	m := &mockOctoStore{}
	m.FetchAllOctosCalled = make(chan bool, 100)
	m.FetchAllOctosInput.Ctx = make(chan context.Context, 100)
	m.FetchAllOctosInput.Database = make(chan persistence.Database, 100)
	m.FetchAllOctosOutput.Octos = make(chan []data.Octo, 100)
	m.FetchAllOctosOutput.Err = make(chan error, 100)
	m.FetchOctoByNameCalled = make(chan bool, 100)
	m.FetchOctoByNameInput.Ctx = make(chan context.Context, 100)
	m.FetchOctoByNameInput.Database = make(chan persistence.Database, 100)
	m.FetchOctoByNameInput.Name = make(chan string, 100)
	m.FetchOctoByNameOutput.Octo = make(chan data.Octo, 100)
	m.FetchOctoByNameOutput.Err = make(chan error, 100)
	m.CreateOctoCalled = make(chan bool, 100)
	m.CreateOctoInput.Ctx = make(chan context.Context, 100)
	m.CreateOctoInput.Database = make(chan persistence.Database, 100)
	m.CreateOctoInput.Octo = make(chan data.Octo, 100)
	m.CreateOctoOutput.OctoId = make(chan int, 100)
	m.CreateOctoOutput.Err = make(chan error, 100)
	m.DeleteOctoByNameCalled = make(chan bool, 100)
	m.DeleteOctoByNameInput.Ctx = make(chan context.Context, 100)
	m.DeleteOctoByNameInput.Database = make(chan persistence.Database, 100)
	m.DeleteOctoByNameInput.Name = make(chan string, 100)
	m.DeleteOctoByNameOutput.Err = make(chan error, 100)
	return m
}
func (m *mockOctoStore) FetchAllOctos(ctx context.Context, database persistence.Database) (octos []data.Octo, err error) {
	m.FetchAllOctosCalled <- true
	m.FetchAllOctosInput.Ctx <- ctx
	m.FetchAllOctosInput.Database <- database
	return <-m.FetchAllOctosOutput.Octos, <-m.FetchAllOctosOutput.Err
}
func (m *mockOctoStore) FetchOctoByName(ctx context.Context, database persistence.Database, name string) (octo data.Octo, err error) {
	m.FetchOctoByNameCalled <- true
	m.FetchOctoByNameInput.Ctx <- ctx
	m.FetchOctoByNameInput.Database <- database
	m.FetchOctoByNameInput.Name <- name
	return <-m.FetchOctoByNameOutput.Octo, <-m.FetchOctoByNameOutput.Err
}
func (m *mockOctoStore) CreateOcto(ctx context.Context, database persistence.Database, octo data.Octo) (octoId int, err error) {
	m.CreateOctoCalled <- true
	m.CreateOctoInput.Ctx <- ctx
	m.CreateOctoInput.Database <- database
	m.CreateOctoInput.Octo <- octo
	return <-m.CreateOctoOutput.OctoId, <-m.CreateOctoOutput.Err
}
func (m *mockOctoStore) DeleteOctoByName(ctx context.Context, database persistence.Database, name string) (err error) {
	m.DeleteOctoByNameCalled <- true
	m.DeleteOctoByNameInput.Ctx <- ctx
	m.DeleteOctoByNameInput.Database <- database
	m.DeleteOctoByNameInput.Name <- name
	return <-m.DeleteOctoByNameOutput.Err
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}

type mockDatabase struct {
	ExecCalled chan bool
	ExecInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	ExecOutput struct {
		Result chan sql.Result
		Err    chan error
	}
	QueryCalled chan bool
	QueryInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	QueryOutput struct {
		Rows chan *sql.Rows
		Err  chan error
	}
	QueryRowCalled chan bool
	QueryRowInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	QueryRowOutput struct {
		Row chan *sql.Row
	}
	BeginTxCalled chan bool
	BeginTxInput  struct {
		Ctx chan context.Context
	}
	BeginTxOutput struct {
		Database chan persistence.Database
		Err      chan error
	}
	CommitCalled chan bool
	CommitOutput struct {
		Err chan error
	}
	RollbackCalled chan bool
	RollbackOutput struct {
		Err chan error
	}
}

func newMockDatabase() *mockDatabase {
	m := &mockDatabase{}
	m.ExecCalled = make(chan bool, 100)
	m.ExecInput.Ctx = make(chan context.Context, 100)
	m.ExecInput.Query = make(chan string, 100)
	m.ExecInput.Args = make(chan []interface{}, 100)
	m.ExecOutput.Result = make(chan sql.Result, 100)
	m.ExecOutput.Err = make(chan error, 100)
	m.QueryCalled = make(chan bool, 100)
	m.QueryInput.Ctx = make(chan context.Context, 100)
	m.QueryInput.Query = make(chan string, 100)
	m.QueryInput.Args = make(chan []interface{}, 100)
	m.QueryOutput.Rows = make(chan *sql.Rows, 100)
	m.QueryOutput.Err = make(chan error, 100)
	m.QueryRowCalled = make(chan bool, 100)
	m.QueryRowInput.Ctx = make(chan context.Context, 100)
	m.QueryRowInput.Query = make(chan string, 100)
	m.QueryRowInput.Args = make(chan []interface{}, 100)
	m.QueryRowOutput.Row = make(chan *sql.Row, 100)
	m.BeginTxCalled = make(chan bool, 100)
	m.BeginTxInput.Ctx = make(chan context.Context, 100)
	m.BeginTxOutput.Database = make(chan persistence.Database, 100)
	m.BeginTxOutput.Err = make(chan error, 100)
	m.CommitCalled = make(chan bool, 100)
	m.CommitOutput.Err = make(chan error, 100)
	m.RollbackCalled = make(chan bool, 100)
	m.RollbackOutput.Err = make(chan error, 100)
	return m
}
func (m *mockDatabase) Exec(ctx context.Context, query string, args ...interface{}) (result sql.Result, err error) {
	m.ExecCalled <- true
	m.ExecInput.Ctx <- ctx
	m.ExecInput.Query <- query
	m.ExecInput.Args <- args
	return <-m.ExecOutput.Result, <-m.ExecOutput.Err
}
func (m *mockDatabase) Query(ctx context.Context, query string, args ...interface{}) (rows *sql.Rows, err error) {
	m.QueryCalled <- true
	m.QueryInput.Ctx <- ctx
	m.QueryInput.Query <- query
	m.QueryInput.Args <- args
	return <-m.QueryOutput.Rows, <-m.QueryOutput.Err
}
func (m *mockDatabase) QueryRow(ctx context.Context, query string, args ...interface{}) (row *sql.Row) {
	m.QueryRowCalled <- true
	m.QueryRowInput.Ctx <- ctx
	m.QueryRowInput.Query <- query
	m.QueryRowInput.Args <- args
	return <-m.QueryRowOutput.Row
}
func (m *mockDatabase) BeginTx(ctx context.Context) (database persistence.Database, err error) {
	m.BeginTxCalled <- true
	m.BeginTxInput.Ctx <- ctx
	return <-m.BeginTxOutput.Database, <-m.BeginTxOutput.Err
}
func (m *mockDatabase) Commit() (err error) {
	m.CommitCalled <- true
	return <-m.CommitOutput.Err
}
func (m *mockDatabase) Rollback() (err error) {
	m.RollbackCalled <- true
	return <-m.RollbackOutput.Err
}
