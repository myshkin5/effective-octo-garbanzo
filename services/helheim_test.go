// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package services_test

import (
	"context"
	"database/sql"
	"time"

	"github.com/myshkin5/effective-octo-garbanzo/persistence"
	"github.com/satori/go.uuid"
)

type mockGarbanzoStore struct {
	FetchAllGarbanzosCalled chan bool
	FetchAllGarbanzosInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
	}
	FetchAllGarbanzosOutput struct {
		Garbanzos chan []persistence.Garbanzo
		Err       chan error
	}
	FetchGarbanzoByAPIUUIDCalled chan bool
	FetchGarbanzoByAPIUUIDInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		ApiUUID  chan uuid.UUID
	}
	FetchGarbanzoByAPIUUIDOutput struct {
		Garbanzo chan persistence.Garbanzo
		Err      chan error
	}
	CreateGarbanzoCalled chan bool
	CreateGarbanzoInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		Garbanzo chan persistence.Garbanzo
	}
	CreateGarbanzoOutput struct {
		GarbanzoId chan int
		Err        chan error
	}
	DeleteGarbanzoByAPIUUIDCalled chan bool
	DeleteGarbanzoByAPIUUIDInput  struct {
		Ctx      chan context.Context
		Database chan persistence.Database
		ApiUUID  chan uuid.UUID
	}
	DeleteGarbanzoByAPIUUIDOutput struct {
		Err chan error
	}
}

func newMockGarbanzoStore() *mockGarbanzoStore {
	m := &mockGarbanzoStore{}
	m.FetchAllGarbanzosCalled = make(chan bool, 100)
	m.FetchAllGarbanzosInput.Ctx = make(chan context.Context, 100)
	m.FetchAllGarbanzosInput.Database = make(chan persistence.Database, 100)
	m.FetchAllGarbanzosOutput.Garbanzos = make(chan []persistence.Garbanzo, 100)
	m.FetchAllGarbanzosOutput.Err = make(chan error, 100)
	m.FetchGarbanzoByAPIUUIDCalled = make(chan bool, 100)
	m.FetchGarbanzoByAPIUUIDInput.Ctx = make(chan context.Context, 100)
	m.FetchGarbanzoByAPIUUIDInput.Database = make(chan persistence.Database, 100)
	m.FetchGarbanzoByAPIUUIDInput.ApiUUID = make(chan uuid.UUID, 100)
	m.FetchGarbanzoByAPIUUIDOutput.Garbanzo = make(chan persistence.Garbanzo, 100)
	m.FetchGarbanzoByAPIUUIDOutput.Err = make(chan error, 100)
	m.CreateGarbanzoCalled = make(chan bool, 100)
	m.CreateGarbanzoInput.Ctx = make(chan context.Context, 100)
	m.CreateGarbanzoInput.Database = make(chan persistence.Database, 100)
	m.CreateGarbanzoInput.Garbanzo = make(chan persistence.Garbanzo, 100)
	m.CreateGarbanzoOutput.GarbanzoId = make(chan int, 100)
	m.CreateGarbanzoOutput.Err = make(chan error, 100)
	m.DeleteGarbanzoByAPIUUIDCalled = make(chan bool, 100)
	m.DeleteGarbanzoByAPIUUIDInput.Ctx = make(chan context.Context, 100)
	m.DeleteGarbanzoByAPIUUIDInput.Database = make(chan persistence.Database, 100)
	m.DeleteGarbanzoByAPIUUIDInput.ApiUUID = make(chan uuid.UUID, 100)
	m.DeleteGarbanzoByAPIUUIDOutput.Err = make(chan error, 100)
	return m
}
func (m *mockGarbanzoStore) FetchAllGarbanzos(ctx context.Context, database persistence.Database) (garbanzos []persistence.Garbanzo, err error) {
	m.FetchAllGarbanzosCalled <- true
	m.FetchAllGarbanzosInput.Ctx <- ctx
	m.FetchAllGarbanzosInput.Database <- database
	return <-m.FetchAllGarbanzosOutput.Garbanzos, <-m.FetchAllGarbanzosOutput.Err
}
func (m *mockGarbanzoStore) FetchGarbanzoByAPIUUID(ctx context.Context, database persistence.Database, apiUUID uuid.UUID) (garbanzo persistence.Garbanzo, err error) {
	m.FetchGarbanzoByAPIUUIDCalled <- true
	m.FetchGarbanzoByAPIUUIDInput.Ctx <- ctx
	m.FetchGarbanzoByAPIUUIDInput.Database <- database
	m.FetchGarbanzoByAPIUUIDInput.ApiUUID <- apiUUID
	return <-m.FetchGarbanzoByAPIUUIDOutput.Garbanzo, <-m.FetchGarbanzoByAPIUUIDOutput.Err
}
func (m *mockGarbanzoStore) CreateGarbanzo(ctx context.Context, database persistence.Database, garbanzo persistence.Garbanzo) (garbanzoId int, err error) {
	m.CreateGarbanzoCalled <- true
	m.CreateGarbanzoInput.Ctx <- ctx
	m.CreateGarbanzoInput.Database <- database
	m.CreateGarbanzoInput.Garbanzo <- garbanzo
	return <-m.CreateGarbanzoOutput.GarbanzoId, <-m.CreateGarbanzoOutput.Err
}
func (m *mockGarbanzoStore) DeleteGarbanzoByAPIUUID(ctx context.Context, database persistence.Database, apiUUID uuid.UUID) (err error) {
	m.DeleteGarbanzoByAPIUUIDCalled <- true
	m.DeleteGarbanzoByAPIUUIDInput.Ctx <- ctx
	m.DeleteGarbanzoByAPIUUIDInput.Database <- database
	m.DeleteGarbanzoByAPIUUIDInput.ApiUUID <- apiUUID
	return <-m.DeleteGarbanzoByAPIUUIDOutput.Err
}

type mockDatabase struct {
	ExecContextCalled chan bool
	ExecContextInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	ExecContextOutput struct {
		Ret0 chan sql.Result
		Ret1 chan error
	}
	QueryContextCalled chan bool
	QueryContextInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	QueryContextOutput struct {
		Ret0 chan *sql.Rows
		Ret1 chan error
	}
	QueryRowContextCalled chan bool
	QueryRowContextInput  struct {
		Ctx   chan context.Context
		Query chan string
		Args  chan []interface{}
	}
	QueryRowContextOutput struct {
		Ret0 chan *sql.Row
	}
}

func newMockDatabase() *mockDatabase {
	m := &mockDatabase{}
	m.ExecContextCalled = make(chan bool, 100)
	m.ExecContextInput.Ctx = make(chan context.Context, 100)
	m.ExecContextInput.Query = make(chan string, 100)
	m.ExecContextInput.Args = make(chan []interface{}, 100)
	m.ExecContextOutput.Ret0 = make(chan sql.Result, 100)
	m.ExecContextOutput.Ret1 = make(chan error, 100)
	m.QueryContextCalled = make(chan bool, 100)
	m.QueryContextInput.Ctx = make(chan context.Context, 100)
	m.QueryContextInput.Query = make(chan string, 100)
	m.QueryContextInput.Args = make(chan []interface{}, 100)
	m.QueryContextOutput.Ret0 = make(chan *sql.Rows, 100)
	m.QueryContextOutput.Ret1 = make(chan error, 100)
	m.QueryRowContextCalled = make(chan bool, 100)
	m.QueryRowContextInput.Ctx = make(chan context.Context, 100)
	m.QueryRowContextInput.Query = make(chan string, 100)
	m.QueryRowContextInput.Args = make(chan []interface{}, 100)
	m.QueryRowContextOutput.Ret0 = make(chan *sql.Row, 100)
	return m
}
func (m *mockDatabase) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ExecContextCalled <- true
	m.ExecContextInput.Ctx <- ctx
	m.ExecContextInput.Query <- query
	m.ExecContextInput.Args <- args
	return <-m.ExecContextOutput.Ret0, <-m.ExecContextOutput.Ret1
}
func (m *mockDatabase) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.QueryContextCalled <- true
	m.QueryContextInput.Ctx <- ctx
	m.QueryContextInput.Query <- query
	m.QueryContextInput.Args <- args
	return <-m.QueryContextOutput.Ret0, <-m.QueryContextOutput.Ret1
}
func (m *mockDatabase) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	m.QueryRowContextCalled <- true
	m.QueryRowContextInput.Ctx <- ctx
	m.QueryRowContextInput.Query <- query
	m.QueryRowContextInput.Args <- args
	return <-m.QueryRowContextOutput.Ret0
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
